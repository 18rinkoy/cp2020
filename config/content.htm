<h1>首頁</h1>
<p><strong><a tabindex=""> Succeeding in PC Hardware</a></strong></p>
<p><img alt="" height="279" src="/images/optane-memory-marquee-16x9-1.png" width="501"/></p>
<p id="N10654" lang="">PC Hardware is an online course, where the content will be presented in the form of both text and activities.</p>
<p id="N10657" lang="">While you will have more flexibility than in a traditional course, you will also have more responsibility for your own learning. You will need to:</p>
<ul lang="">
<li lang="">Plan how to work through each unit.</li>
<li lang="">Determine how to use the various features of the course to help you learn.</li>
<li lang="">Decide when you need to seek additional support.</li>
</ul>
<h1>網站</h1>
<p>Github:<a href="https://github.com/40923243/cp2020">https://github.com/40923243/cp2020</a></p>
<p>Kaggle:<a href="https://www.kaggle.com/gg542466/cp2020w8">https://www.kaggle.com/gg542466/cp2020w8</a></p>
<p></p>
<h1>HW1</h1>
<h2>Overview(總覽)</h2>
<p>In this lesson, we will discuss TCP/IP, and the two common types of Internet addressing: Internet protocol version 4 (IPv4) and Internet protocol version 6 (IPv6). We will discuss IPv4 in depth, as it is still the most dominant version in use in our networks. Then, we will cover the specifics of IPv6, differences between IPv4 and IPv6, and the reason we are moving toward IPv6 in the future.</p>
<p><br/>在本課程中，我們將討論TCP / IP以及Internet尋址的兩種常見類型：Internet協議版本4（IPv4）和Internet協議版本6（IPv6）。我們將深入討論IPv4，因為它仍然是我們網絡中使用的最主要版本。然後，我們將介紹IPv6的細節，IPv4與IPv6之間的差異以及將來向IPv6過渡的原因。</p>
<h2>TCP IP</h2>
<p>Computer networks — including the Internet, which is the largest computer network — use Transmission Control Protocol/Internet Protocol or TCP/IP for network communications both internally on a LAN/WAN and externally to the Internet.</p>
<p>TCP/IP provides end-to-end connectivity of data. TCP/IP specifies how data should be grouped, addressed, transmitted, routed, and received at the destination address. The TCP/IP model, along with many of its protocols, is maintained and managed by the IETF (Internet Engineering Task Force).</p>
<p>TCP/IP is one of two sets of protocols that collectively operate in the transport and network layers of the OSI model.</p>
<p>In addition to creating message segments and ensuring connectivity, some of the basic characteristics of the IP protocol ensure that datagrams are routed to the correct destination using a binary addressing scheme. While the process of how the IP addresses are derived from binary (and hexadecimal relationships) is not covered in this course, it is important to know that just as computer CPUs use binary numbers to process data, networking hardware and protocols do so as well.</p>
<p><br/>計算機網絡（包括最大的計算機網絡Internet）使用傳輸控制協議/ Internet協議或TCP / IP進行內部LAN / WAN上和外部Internet的網絡通信。</p>
<p>TCP / IP提供數據的端到端連接。TCP / IP指定如何在目標地址處對數據進行分組，尋址，傳輸，路由和接收。TCP / IP模型及其許多協議由IETF（Internet工程任務組）維護和管理。</p>
<p>TCP / IP是在OSI模型的傳輸層和網絡層中共同運行的兩組協議之一。</p>
<p>除了創建消息段並確保連接性之外，IP協議的某些基本特徵還可以確保使用二進制尋址方案將數據報路由到正確的目的地。儘管本課程未介紹如何從二進制（和十六進制關係）派生IP地址的過程，但重要的是要知道，就像計算機CPU使用二進制數來處理數據一樣，網絡硬件和協議也是如此。</p>
<h2>IPv4 and IPv6 Addresses</h2>
<p>Network devices require a logical address — either an IPv4 or IPv6 address (see the network layer in the diagram above) — when moving data from one network segment to another. As we discussed in previous modules, switches make their intelligent switching decisions (see the data link layer in the diagram above based on media access control (MAC) addresses. The MAC address, also known as the physical address, is the unique identifier hard coded on a network interface card by the manufacturer. Switches use these MAC addresses to identify which devices are on which switch ports, and forward traffic within the network segment to the correct ports based on these addresses. When data traffic needs to cross the boundaries of the network, it requires a logical address that the router can use to make intelligent routing decisions. In most modern networks, this is done by using TCP/IP addressing. Historically, other protocols existed, such as internetwork packet exchange/sequenced packet exchange (IPX/SPX) for Novell networks, AppleTalk, and NetBEUI for Microsoft networks. TCP/IP replaced these protocols almost exclusively due to its robust nature, reliability, and availability.</p>
<p>While the majority of our networks today still use IPv4, many networks are migrating to the newer IPv6 addressing standards. Additionally, many networks are offering dual support to both IPv4 and IPv6 during the transition. The reason for this transition is that we were running out of valid IPv4 addresses. IPv4 uses a 32-bit addressing scheme, providing only 4.2 billion available addresses, but IPv6 uses a 128-bit addressing scheme. IPv6 allows for 2128addresses, or 340,282,366,920,938,000,000,000,000,000,000,000,000 (3.4 x 1038) unique IP addresses. IPv6 allows for more IP addresses than humanity could ever utilize. At least that is what we think right now.</p>
<p>將數據從一個網段移動到另一個網段時，網絡設備需要邏輯地址-IPv4或IPv6地址（請參見上圖中的網絡層）。正如我們在之前的模塊中討論的那樣，交換機做出明智的交換決策（請參見上圖中的數據鏈路層，基於媒體訪問控制（MAC）地址。MAC地址，也稱為物理地址，是唯一的硬編碼標識符）交換機使用這些MAC地址來識別哪些設備在哪個交換機端口上，然後根據這些地址將網段內的流量轉發到正確的端口。在網絡中，它需要邏輯地址，路由器可以使用該邏輯地址來做出智能路由決策。在大多數現代網絡中，這是通過使用TCP / IP尋址完成的。從歷史上看，存在其他協議，例如Novell網絡的互聯網絡數據包交換/排序數據包交換（IPX / SPX），Apple網絡的AppleTalk和NetBEUI。由於TCP / IP的魯棒性，可靠性和可用性，它們幾乎完全取代了這些協議。</p>
<p>儘管當今我們的大多數網絡仍使用IPv4，但許多網絡正在遷移到更新的IPv6尋址標準。此外，在過渡期間，許多網絡都對IPv4和IPv6提供雙重支持。進行此轉換的原因是我們用盡了有效的IPv4地址。IPv4使用32位尋址方案，僅提供42億個可用地址，而IPv6使用128位尋址方案。IPv6允許2 128地址或340,282,366,920,938,000,000,000,000,000,000,000,000（3.4×10 38）的唯一的IP地址。IPv6提供的IP地址超出了人類所能利用的範圍。至少這就是我們現在的想法。</p>
<h2>Addressing Notation 尋址符號</h2>
<p>Internet protocol (IP) networking relies on both an IP address and subnet mask using a 32-bit dotted decimal notation. The Internet Engineering Task Force (IETF) and the Internet Corporation for Assigned Names and Numbers (ICANN) developed and maintains the standards for IP allocation and protocols.</p>
<p><br/>Internet協議（IP）網絡使用32位點分十進製表示法同時依賴IP地址和子網掩碼。互聯網工程任務組（IETF）和互聯網名稱與數字地址分配機構（ICANN）制定並維護了IP分配和協議的標準。</p>
<p>Each octet is made up of eight bits (one byte or two nibbles); multiplied by four octets, that equals 32 bits. The maximum value for any octet is 255 (28-1) so therefore the maximum number of IPv4 addresses available is 232, which equals 4,294,967,296 unique addresses.</p>
<p>The presence of the subnet mask tells networking devices how much of the IP address belongs to the network and how much to the host. The 255.255.255.0 subnet represents that the first three octets are the network and the “0” represents the available number of hosts (nodes). So, the form is N.N.N.H. Think of the combination of IP and subnet as similar to regular postal addresses. You need a zip code (subnet) and street address (host).</p>
<p>There are five different classes in IPv4 labelled A through E, with classes A, B, and C used by computer networks and classes D and E reserved as experimental. As originally designed, the IP range is determined by the lead bits in the first octet and matched to one specific subnet mask. This is called "classful" addressing. When the IP class does not match the default subnet mask, it is called "classless."</p>
<p>每個八位位組由八位組成（一個字節或兩個半字節）。乘以四個八位位組，等於32位。任何八位位組的最大值為255（2 8 -1），因此可用的IPv4地址的最大數量為2 32，等於4,294,967,296個唯一地址。</p>
<p>子網掩碼的存在告訴網絡設備多少IP地址屬於網絡，多少屬於主機。255.255.255.0子網表示前三個八位位組是網絡，“ 0”表示可用的主機（節點）數。因此，形式為NNNH。將IP和子網的組合視為類似於常規郵政地址。您需要一個郵政編碼（子網）和街道地址（主機）。</p>
<p>IPv4中有五種不同的類別，標記為A到E，計算機網絡使用的類別為A，B和C，D和E類別保留為實驗性。按照最初的設計，IP範圍由第一個八位位組中的前導位確定，並與一個特定的子網掩碼匹配。這稱為“有類”尋址。如果IP類與默認子網掩碼不匹配，則稱為“無類”。</p>
<p></p>
<h2>Network and Host Addresses  網絡和主機地址</h2>
<p>An IPv4 network address is further divided into two portions based upon the subnet mask: the network portion and the host portion. A subnet mask is a series of numbers used for routing traffic within a subnetwork. When a subnet mask is used to define the network portion, anywhere there is a binary “11111111” (or 255 in decimal) used, this area is considered part of the network portion. When a binary “00000000” (0 in decimal) is used, this represents the host portion of the address. The host represents a single device on the network, such as your computer or phone.</p>
<p>IPv4網絡地址根據子網掩碼進一步分為兩部分：網絡部分和主機部分。子網掩碼是用於在子網內路由流量的一系列數字。當使用子網掩碼定義網絡部分時，在任何使用二進制“ 11111111”（或十進制255）的地方，該區域均被視為網絡部分的一部分。當使用二進制“ 00000000”（十進制為0）時，它表示地址的主機部分。主機代表網絡上的單個設備，例如您的計算機或電話。</p>
<p>As you can see, when the subnet mask has a 255 in it, it is defining the network portion of the address. In class A addresses, the first octet defines the network, and the last three define the host. In class B addresses, the first two octets define the network, the last two define the host. In class C addresses, the first three octets define the network, the last one defines the host.</p>
<p>如您所見，當子網掩碼中包含255時，它定義了地址的網絡部分。在A類地址中，第一個八位位組定義網絡，最後三個八位位組定義主機。在B類地址中，前兩個八位位組定義網絡，後兩個定義主機。在C類地址中，前三個八位位組定義網絡，最後一個八位位組定義主機。</p>
<p>Subnet masks are used to define the specific network we are referencing. A standard class A subnet mask of 255.0.0.0 is used for all networks where the first octet starts with a number between 1 and 126.</p>
<p>子網掩碼用於定義我們要引用的特定網絡。255.0.0.0的標準A類子網掩碼適用於所有第一個八位位組以1到126之間的數字開頭的網絡。</p>
<p>Therefore, this address fits into the class A category. In this course, we only deal with “classful” subnet masks — the ones that only contain values of 255 and 0. In future courses, you may see other subnet masks used to further break apart the networks.</p>
<p>因此，該地址屬於A類類別。在本課程中，我們僅處理“有類”子網掩碼-僅包含255和0的值。在以後的課程中，您可能會看到其他子網掩碼用於進一步拆分網絡。</p>
<p>To route your traffic over the Internet, you are required to have a publically routable IP address. These addresses are globally managed by the Internet Corporation for Assigned Names and Numbers (ICANN). If you desire to have one of these addresses, you must purchase them for use to ensure no one else has that specific number. For most users, this is done for you by your Internet service provider (ISP), but if you have a need for numerous public IP addresses, you can buy a block of them from ICANN.</p>
<p>Private IP addresses, on the other hand, can be used by anyone without any prior coordination. This is because private IP addresses are not routable over the Internet and are only used inside your local area network. For example, at your home, you may have five computers hooked up to your switch and those machines are all using private IP addresses. When you make a request to go outside the network, like to visit a college’s website, your router performs a network address translation (NAT) that allows your private IP address to be converted into a public IP address and a port, which then makes the request on your behalf. There is a specific range of IP addresses that are reserved as private for internal use (by you and others).</p>
<p>要通過Internet路由流量，您需要具有可公共路由的IP地址。這些地址由互聯網名稱與數字地址分配機構（ICANN）全局管理。如果您希望擁有這些地址之一，則必須購買它們以確保沒有其他人擁有該特定號碼。對於大多數用戶而言，這是由Internet服務提供商（ISP）為您完成的，但是如果您需要大量的公共IP地址，則可以從ICANN購買其中的一部分。</p>
<p>另一方面，任何人都可以使用私有IP地址，而無需事先協調。這是因為專用IP地址無法通過Internet路由，而只能在局域網內使用。例如，在家裡，您可能有五台計算機連接到交換機，而這些計算機都使用私有IP地址。當您發出訪問網絡的請求（例如訪問大學的網站）時，路由器會執行網絡地址轉換（NAT），該轉換可將您的私有IP地址轉換為公共IP地址和端口，從而使代表您提出要求。有一個特定範圍的IP地址保留為私有（供您和他人使用）供內部使用。</p>
<h2>IPv4 Data Flows IPv4數據流</h2>
<p>In Internet protocol version 4, there are three types of data flows that can occur: unicast, broadcast, and multicast.</p>
<p>The most common and most widely used is called unicast. In unicast communication, data travels from a single device to another single device on the network. For example, when you go to www.google.com in your web browser, your computer makes a request to one of Google’s web servers using unicast communication, and one of Google’s computers then sends the data back using unicast communication to just your computer.</p>
<p>在Internet協議版本4中，可以發生三種類型的數據流：單播，廣播和多播。</p>
<p>最常見和最廣泛使用的方法稱為單播。在單播通信中，數據從網絡上的單個設備傳輸到另一個單個設備。例如，當您在網絡瀏覽器中訪問www.google.com時，您的計算機使用單播通信向一台Google的Web服務器發出請求，然後一台Google的計算機通過單播通信將數據發送回您的計算機。</p>
<p>When data is sent as a broadcast communication, it travels from a single device (such as your computer) to every other device on the network. This data will not travel outside the current subnet, though, when using broadcast. An example of broadcast communications would be if your system administrator was going to shut down a switch for maintenance. She may send out a broadcast message to everyone connected to that switch, warning them that their connectivity is going to be lost in the next ten minutes. You can think of this type of messaging like a teacher who is about to announce the next homework assignment. The teacher may say (or broadcast), “Class, here is your homework for tonight.” The message is directed at everyone in the class (or subnet) and they all should receive the message.</p>
<p><br/>當數據作為廣播通信發送時，它從單個設備（例如您的計算機）傳輸到網絡上的所有其他設備。但是，使用廣播時，該數據不會在當前子網之外傳播。例如，如果您的系統管理員要關閉交換機進行維護，則為廣播通信。她可能會向連接到該交換機的每個人發出廣播消息，警告他們在接下來的十分鐘內將失去連接。您可以將這種消息傳遞想像為即將宣布下一個作業的老師。老師可能會說（或廣播）“課，這是你今晚的作業”。該消息針對班級（或子網）中的每個人，他們所有人都應該收到該消息。</p>
<p>The final method of data travel is called multicast. In multicast communication, data travels from a single device to multiple other devices on the network, but not necessarily to all of them, like it does when using broadcast communication. Also, this can expand outside of a single subnet. This works well when sharing a resource, such as streaming video. You can think of this type of communication as the Internet equivalent of watching satellite TV. For satellite TV, the signal is being sent out, but you have to “tune in” in order to receive (view) the data.</p>
<h2>Benefits of IPv6 IPv6的好處</h2>
<p>IPv6 has many benefits over IPv4, the biggest of which is the number of available IP addresses. In IPv6, there is no broadcast provided, which frees up IP addresses, reduces the amount of traffic sent over the network, and increases bandwidth. Also, IPv6 doesn’t allow packets to be fragmented (broken into pieces) during transmission. This is handled by the protocol by resizing the maximum transmission unit size each time a session is created between two devices.</p>
<p>A major benefit of IPv6 is that it allows for dual stack implementation, which means that IPv4 and IPv6 can run simultaneously on a device and provide service to the device from either protocol without conflict. IPv6 can also run on top of IPv4 as a tunneled protocol, thereby allowing it to run over older devices, as well.</p>
<p>Lastly, the packet headers in IPv6 are much simpler than in IPv4. In IPv4, there are 12 fields that must be completely filled out (adding to overhead and complexity), but in IPv6 this was reduced to the bare minimum of five fields. This includes fields such as source and destination address, as well as quality of service priority.</p>
<p>與IPv4相比，IPv6有很多好處，其中最大的好處就是可用IP地址的數量。在IPv6中，沒有提供廣播，這釋放了IP地址，減少了通過網絡發送的流量，並增加了帶寬。此外，IPv6不允許在傳輸過程中將數據包分段（分成多個部分）。協議通過每次在兩個設備之間創建會話時調整最大傳輸單元大小來解決此問題。</p>
<p>IPv6的一個主要優點是它允許雙棧實現，這意味著IPv4和IPv6可以在設備上同時運行，並可以從任一協議向設備提供服務而不會發生衝突。IPv6還可以作為隧道協議在IPv4之上運行，從而也可以在較舊的設備上運行。</p>
<p>最後，IPv6中的數據包頭比IPv4中的數據包頭簡單得多。在IPv4中，必須完全填寫12個字段（增加了開銷和復雜性），但是在IPv6中，此字段減少到最少五個字段。這包括諸如源地址和目標地址以及服務質量優先級之類的字段。</p>
<p><br/><br/>IPv6 Address Structure IPv6地址結構</p>
<p>While IPv6 has numerous improvements over IPv4, the most notable thing about IPv6 that people see is the format of the address. Instead of the dotted-decimal notation we used in IPv4 with addresses like 192.168.1.1, IPv6 uses eight groupings of four hexadecimal digits in each group. Each group is then broken apart by a colon (:). An example of an IPv6 address is 2002:0000:0000:0000:0000:0000:4815:54ae.</p>
<p>A hexadecimal digit allows for counting from zero to 15 using the digits 0-9, then the letters A through F. Each hexadecimal digit replaces four binary digits (or four 1s and 0s), allowing us to write an IPv6 address using (at most) 32 hexadecimal digits.</p>
<p>Luckily, the creators of IPv6 allowed for a shorthand. First, anytime there are leading zeros, they can be dropped. This is equivalent to dropping the leading zeros in the number 0010 to 10. The numbers are equivalent, as long as the zeros are in front of the other digits. The second shorthand technique involves several groupings of four zeros. When multiple groupings of four zeros are present, they can be represented by a double colon (::). Note that you can only use the double colon once per address, because the only way to know how many sets of zeros you’ve replaced with the double colon is to compare the shorthand address with the total number of bits available.</p>
<p>儘管IPv6相對於IPv4進行了許多改進，但是人們看到的關於IPv6的最值得注意的事情是地址的格式。IPv6不是在IPv4中使用像192.168.1.1這樣的地址使用的點分十進製表示法，而是在每個組中使用四個十六進制數字組成的八組。然後，每個組用冒號（:)分隔。IPv6地址的示例是2002：0000：0000：0000：0000：0000：0000：4815：54ae。</p>
<p>十六進制數字允許使用數字0-9（從字母A到F）從零到15進行計數。每個十六進制數字都替換了四個二進制數字（或四個1和0），從而允許我們使用（最多）32個十六進制數字。</p>
<p>幸運的是，IPv6的創建者允許使用簡寫形式。首先，只要有前導零，就可以將其丟棄。這等效於將數字0010中的前導零刪除為10。這些數字是等效的，只要零在其他數字的前面即可。第二種速記技術涉及四個零的幾個分組。當存在四個零的多個分組時，可以用雙冒號（：:)表示。請注意，每個地址只能使用雙冒號一次，因為知道用雙冒號替換了多少組零的唯一方法是將速記地址與可用位數進行比較。</p>
<h2>IPv6 Data Flows   IPv6數據流</h2>
<p>Data flows in IPv6 are similar to those in IPv4. In fact, unicast and multicast work identical to their IPv4 counterparts. But, because there is no broadcast in IPv6, it has been replaced with “anycast.” Anycast allows data to travel from a single source device to the nearest of multiple, but specific, devices on a network. Anycasting is designed to let one host initiate the efficient updating of router tables for a group of hosts. IPv6 can determine which gateway host is closest and sends the packets to that host as though it were a unicast communication. In turn, that host can anycast to another host in the group until all routing tables are updated.</p>
<p>IPv6中的數據流類似於IPv4中的數據流。實際上，單播和多播的工作方式與IPv4相同。但是，由於IPv6中沒有廣播，因此已將其替換為“任何廣播”。Anycast允許數據從單個源設備傳輸到網絡上多個（但特定的）設備中最接近的一個。任意廣播旨在讓一個主機為一組主機啟動路由器表的有效更新。IPv6可以確定哪個網關主機最接近，並將數據包發送到該主機，就好像它是單播通信一樣。相應地，該主機可以向組中的另一台主機任意廣播，直到更新所有路由表為止。</p>
<p><br/>The IP address always determines the class of a network and never the subnet. When the IP addresses match, the network is said to be using a “classful” scheme. However, this allows for many wasted IP addresses when a company needs more publicly routable IP addresses than the address class they are using offers. Classless inter-domain routing (CIDR) was developed in order to make the IP addressing scheme more efficient and to delay the depletion of IPv4 addresses. Essentially, some of the network bits in the default subnet mask are borrowed and used for the host portion of the network. For example, if a business needs 300 public IP addresses, then class C addresses would be too small because of the 254 device limitation, and class B would be excessively large. With CIDR, a business could be assigned an IP address range with a subnet of 255.255.254.0/23. In CIDR notation, “/23” indicates that the first 23 bits of the address are the network part of the address, which leaves the last nine bits for host addresses, rather than the eight bits that would be available in classful addressing. That means there will now be 510 IP numbers available rather than 254.</p>
<p>IP地址始終確定網絡的類別，而不是子網。如果IP地址匹配，則稱網絡正在使用“分類”方案。但是，當公司需要比其使用的地址類別更多的可公共路由的IP地址時，這會浪費許多IP地址。開發無類域間路由（CIDR）是為了使IP尋址方案更有效並延遲IPv4地址的耗盡。本質上，默認子網掩碼中的某些網絡位被借用並用於網絡的主機部分。例如，如果一家企業需要300個公共IP地址，則由於254個設備限制，C類地址將太小，而B類將太大。使用CIDR，可以為企業分配一個IP地址範圍，其子網為255.255.254。0/23。在CIDR表示法中，“ / 23”表示地址的前23位是地址的網絡部分，剩下的最後9位用於主機地址，而不是分類尋址中可用的8位。這意味著現在將有510個IP號碼，而不是254個。</p>
<p><br/><br/>Private Vs. Public IP Addresses 私人vs. 公用IP地址</p>
<p>IPv4 depletion affects public addresses that are routable on the Internet by such devices as routers and servers, as well as the device used to connect your home to the Internet. Whether it is a cable modem, DSL, or FIOS, that device has a public IP address that communicates with your Internet service provider (ISP). This is an example of a WAN. The LAN (local area network) is wholly comprised of private IP addresses.</p>
<p>IPv4耗盡會影響可通過路由器和服務器之類的設備以及用於將家庭連接到Internet的設備在Internet上路由的公用地址。無論是電纜調製解調器，DSL還是FIOS，該設備都具有與Internet服務提供商（ISP）通信的公共IP地址。這是WAN的示例。LAN（局域網）完全由專用IP地址組成。</p>
<p>In order for a LAN node to access the Internet, IPv4 uses network address translation (NAT), which is a technique where the gateway/router would replace the outgoing private IPv4 address with the publically routable address assigned by the ISP.</p>
<p>為了使LAN節點能夠訪問Internet，IPv4使用網絡地址轉換（NAT），這是網關/路由器將出站專用IPv4地址替換為ISP分配的可公開路由地址的技術。</p>
<p><br/><br/>Static Vs. Dynamic IP Addressing 靜態與 動態IP尋址</p>
<p>Historically, the client (a workstation or a printer) would be assigned a static IP address manually using the operating system IPv4 configuration. Remember, you must have unique IP addresses in any network. Imagine how difficult it was in a large corporation to track all the different nodes and IP addresses. Dynamic host configuration protocol (DHCP) solves this problem by having one device (a server or a router) automatically assign an IP address. In the current network structure, you would still assign static IP addresses to devices that must have guaranteed connectivity: servers, routers, managed switches, etc. However, DHCP can provide many benefits in networking maintenance with the abundant wireless devices such as cell phones, tablets, and laptops coming in and out of a network daily. Companies have developed policies for employees to bring their own devices to work, thus accessing the corporate network. DHCP will give the client setup parameters (gateway, domain, and name servers), keeping a specific pool of IP addresses, and offering timed leases for a device’s IP assignment.</p>
<p>從歷史上看，將使用操作系統IPv4配置為客戶端（工作站或打印機）手動分配靜態IP地址。請記住，任何網絡中都必須具有唯一的IP地址。想像一下，在一家大公司中跟踪所有不同的節點和IP地址有多麼困難。動態主機配置協議（DHCP）通過讓一台設備（服務器或路由器）自動分配IP地址來解決此問題。在當前的網絡結構中，您仍將靜態IP地址分配給必須保證連接性的設備：服務器，路由器，受管理的交換機等。但是，DHCP可以通過大量的無線設備（例如手機，平板電腦和筆記本電腦每天進出網絡。公司已製定政策，要求員工使用自己的設備來工作，從而訪問公司網絡。DHCP將提供客戶端設置參數（網關，域和名稱服務器），保留特定的IP地址池，並為設備的IP分配提供定時租約。</p>
<p></p>
<h2>APIPA  Link-Local   APIPA  本地鏈接</h2>
<p>Link-local addresses are special addresses assigned by the operating system when either there is no statically assigned IP address, or the DHCP does not assign one to the network interface. Link-local addresses are not routable and only function in a LAN segment. In IPv4, the address range is 169.254.0.0/16 and the form is 169.254.x.x. In IPv6, the form is FE80::/64. In a Microsoft OS, the link-local address is referred to as automatic private IP addressing (APIPA).</p>
<p>If you are troubleshooting an NIC (network interface card) that is supposed to be connected and you see a link-local address, this indicates that there is something wrong with the configuration because the OS assigned the address.</p>
<p>當沒有靜態分配的IP地址，或者DHCP沒有為網絡接口分配一個IP地址時，本地鏈接地址是操作系統分配的特殊地址。本地鏈接地址不可路由，只能在LAN網段中使用。在IPv4中，地址範圍為169.254.0.0/16，格式為169.254.xx。在IPv6中，格式為FE80 :: / 64。在Microsoft操作系統中，本地鏈接地址稱為自動專用IP尋址（APIPA）。</p>
<p>如果要對應該連接的NIC（網絡接口卡）進行故障排除，並且看到鏈接本地地址，則表明配置有問題，因為操作系統分配了該地址。</p>
<h2>Client-side DHCP   客戶端DHCP</h2>
<p>DHCP works by having an authoritative device, either a server or a router, offering to assign the IP address. In order for this to work, the client must be configured to look for the DHCP authority, and confirm that it will accept the IP assignment. These settings are located in “network connections” through either the network and sharing center or directly through the control panel. The configuration settings are located in the properties of the connection under either IPv4 or IPv6.</p>
<p>DHCP通過擁有授權設備（服務器或路由器）來分配IP地址而起作用。為了使它起作用，必須將客戶端配置為尋找DHCP授權，並確認它將接受IP分配。這些設置通過網絡和共享中心位於“網絡連接”中，也可以直接通過控制面板位於“網絡連接”中。配置設置位於IPv4或IPv6下的連接屬性中。</p>
<h2>Client-side DNS settings   客戶端DNS設置</h2>
<p>The domain name system (DNS) is a part of the Internet protocol that translates IP addresses to name addresses. There is a setting located in the network properties section of the IPv4 or IPv6 property window that allows for the manual setting of the the domain name system (DNS) server address. The local DNS cache will keep a local record of IP address to name conversion for both LAN devices and Internet addresses. Alternate DNS server addresses can be added to the client to assist in name resolution, thus improving data flow.</p>
<p>域名系統（DNS）是Internet協議的一部分，該協議將IP地址轉換為名稱地址。IPv4或IPv6屬性窗口的網絡屬性部分中有一個設置，允許手動設置域名系統（DNS）服務器地址。本地DNS緩存將保留IP地址到LAN設備和Internet地址的名稱轉換的本地記錄。可以將備用DNS服務器地址添加到客戶端以幫助名稱解析，從而改善數據流。</p>
<p><br/><br/>Gateway 網關</p>
<p>The gateway is the device that connects different networks types together. In most SOHO (small office, home office) environments today, this is the router that connects the LAN to the ISP modem through the WAN port (cable, DSL, or FIOS), which provides Internet access. In a larger corporate environment, it is the last router in the LAN that connects to a WAN link, and then passes the IP packets to their destination. The difference is that in a larger corporate environment, there can be multiple LAN segments and routers between the client workstation and the gateway.</p>
<p>網關是將不同網絡類型連接在一起的設備。在當今的大多數SOHO（小型辦公室，家庭辦公室）環境中，這是通過WAN端口（電纜，DSL或FIOS）將LAN連接到ISP調製解調器的路由器，可以提供Internet訪問。在較大的公司環境中，它是LAN中的最後一個路由器，它連接到WAN鏈接，然後將IP數據包傳遞到其目的地。區別在於，在較大的公司環境中，客戶端工作站和網關之間可以有多個LAN網段和路由器。</p>
<p>Windows networking is nearly identical in all aspects from Vista through to Windows 10. To access the network settings, go to either the control panel, then “network and Internet,” then “network and sharing center,” or right-click the “open network and sharing center” icon in the system tray (next to the clock).</p>
<p>從Vista到Windows 10，Windows聯網在各個方面都幾乎相同。要訪問網絡設置，請轉到控制面板，然後依次單擊“網絡和Internet”，“網絡和共享中心”，或右鍵單擊“打開”。網絡和共享中心”圖標（位於時鐘旁邊）。</p>
<p>Remember, a technician will ensure settings fit the current network. Most networks are set up with DHCP, which will provide the workstation with an IP address, gateway, and DNS server address.</p>
<p>Double-click the IPv4 properties dialogue box and set both radio buttons to “obtain (an IP address/DNS server address) automatically.” The window on the right in the image below allows for the APIPA address to be automatically assigned or for the user to configure a static IPv4 address.</p>
<p>請記住，技術人員將確保設置適合當前網絡。大多數網絡都設置有DHCP，它將為工作站提供IP地址，網關和DNS服務器地址。</p>
<p>雙擊IPv4屬性對話框，並將兩個單選按鈕設置為“自動獲取（IP地址/ DNS服務器地址）”。下圖右側的窗口允許自動分配APIPA地址或允許用戶配置靜態IPv4地址。</p>
<p><br/><br/>Overview 總攬</p>
<p>In this lesson, we will discuss transmission control protocol (TCP) and user datagram protocol (UDP), as well as their associated ports and protocols. We will specifically address the various email ports and protocols in use today, as well as discussing secure sockets layer/transport layer security (SSL/TLS) in the context of web security. Then, we will discuss file transfer protocol (FTP) and hypertext transfer protocol (HTTP) and their use on the Internet today, as well as some older technologies such as Telnet and its more secure alternative, secure shell (SSH).</p>
<p>在本課程中，我們將討論傳輸控制協議（TCP）和用戶數據報協議（UDP），以及它們相關的端口和協議。我們將專門解決當今使用的各種電子郵件端口和協議，並在Web安全的背景下討論安全套接字層/傳輸層安全性（SSL / TLS）。然後，我們將討論文件傳輸協議（FTP）和超文本傳輸協議（HTTP）及其在當今Internet上的使用，以及一些較老的技術，例如Telnet及其更安全的替代方法，安全外殼（SSH）。</p>
<p>TCP is a connection-oriented protocol that ensures the reliable transport of data segments from one device to another. During transmission, if a segment is dropped, it will be detected and resent or retransmitted by the originator device. Each communication is acknowledged upon receipt, providing a secure model to ensure successful communications. This type of transmission is great for all network data types, especially those that need delivery to be assured.</p>
<p>When a TCP communication is initiated, the originator and receiver perform a “three-way handshake” before starting the data transmission. In the first step, the originator sends a packet with a synchronization (SYN) flag set. Next, the receiver acknowledges receipt of this SYN flagged packet by sending back a synchronization-acknowledged (SYN-ACK) flagged packet. Finally, the originator sends an acknowledgement of the synchronization-acknowledged flagged packet, and then data transmission occurs.</p>
<p>TCP是一種面向連接的協議，可確保將數據段從一台設備可靠地傳輸到另一台設備。在傳輸過程中，如果某個段丟失，則發起方設備將檢測到該段並將其重新發送或重新傳輸。每次通信在收到後都會得到確認，從而提供一個安全的模型來確保成功進行通信。這種傳輸方式適用於所有網絡數據類型，尤其是那些需要確保傳輸的網絡數據類型。</p>
<p>當啟動TCP通信時，發起方和接收方在開始數據傳輸之前執行“三向握手”。第一步，發起方發送一個設置了同步（SYN）標誌的數據包。接下來，接收器通過發回一個同步確認（SYN-ACK）標記數據包來確認此SYN標記數據包的接收。最後，始發者發送對已同步確認的標記數據包的確認，然後發生數據傳輸。</p>
<h2>TCP Vs. UDP  TCPVs。UDP協議</h2>
<p>TCP and UDP have many differences. TCP is reliable, but UDP is unreliable. TCP focuses on connection-oriented communications using the three-way handshake, while UDP is connectionless. TCP uses windowing, discussed in more detail later, to control the amount of data sent at a given time based on changing network speeds, but UDP simply transmits everything once with no windowing. TCP also supports segment sequencing; UDP just hopes it gets to the destination in the right order. Finally, TCP waits for acknowledgements, but UDP just hopes it got there. To simplify it, TCP is an assured and reliable communication method, UDP is just a best-effort model.</p>
<p>learn by doing</p>
<p>TCP和UDP有許多區別。TCP是可靠的，但UDP是不可靠的。TCP專注於使用三向握手的面向連接的通信，而UDP是無連接的。TCP使用開窗（稍後將詳細討論）來基於不斷變化的網絡速度來控制在給定時間發送的數據量，但是UDP僅傳輸所有信息一次而沒有開窗。TCP還支持段排序；UDP只是希望它以正確的順序到達目的地。最後，TCP等待確認，但是UDP只是希望它到達目的地。為簡化起見，TCP是一種有保證且可靠的通信方法，UDP只是一種盡力而為的模型。</p>
<h2>TCP Windowing   TCP窗口</h2>
<p>TCP also supports a concept called windowing. If you have ever copied a file from a network share drive on the Windows operating system, you have seen windowing. Have you ever noticed when you copy a file over the network, it may start out saying there are “2 minutes remaining” until completion, then it jumps up to “3 hours remaining,” then back down to “30 minutes remaining”? This is TCP windowing in action.</p>
<p>Essentially, when a communication session is established with TCP, it first performs the three-way handshake. Next, it starts with a small window size, like windows size 1 in the image below, where a single segment is sent over the network and acknowledged. If this is successful, it increases the window size to 2, sending two segments at a time. It continues to do this, increasing the number of segments each time, transmitting more data in each window until an error occurs and retransmissions must be done. If errors occur, TCP understands that it must have been transmitting too fast, so it shrinks the window to slow down communication. As transmissions occur successfully, it again increases the window to push more data in each window. This window size is continually adjusted to get the most segments per window with the least errors in communication.</p>
<p>TCP還支持稱為窗口化的概念。如果您曾經從Windows操作系統上的網絡共享驅動器中復製過文件，則會看到窗口。您是否曾經註意到通過網絡複製文件時，它可能會說“剩餘2分鐘”直到完成，然後跳到“剩餘3小時”，然後又跳回到“剩餘30分鐘”？這是TCP窗口在起作用。</p>
<p>本質上，當使用TCP建立通信會話時，它首先執行三向握手。接下來，它以較小的窗口大小開始，如下面的圖片中的窗口大小1所示，其中單個段通過網絡發送並確認。如果成功，它將窗口大小增加到2，一次發送兩個段。它繼續執行此操作，每次增加段數，在每個窗口中傳輸更多數據，直到發生錯誤並必須重新傳輸為止。如果發生錯誤，TCP知道它一定傳輸速度太快，因此它縮小了窗口以減慢通信速度。隨著傳輸成功進行，它將再次增加窗口以在每個窗口中推送更多數據。</p>
<p>Each client and server has an IP address. Clients and servers are identified on the network by their IP addresses. In addition to an IP address, each machine has numerous “ports” that we can utilize. A port is an endpoint to a logical connection. A client program specifies a particular server program on a computer in a network by identifying a port. Ports allow a single client to communicate simultaneously with multiple other devices, separating each session by using a designated port number.</p>
<p>每個客戶端和服務器都有一個IP地址。客戶端和服務器通過其IP地址在網絡上進行標識。除了IP地址外，每台機器都有許多我們可以利用的“端口”。端口是邏輯連接的端點。客戶端程序通過識別端口來指定網絡中計算機上的特定服務器程序。端口允許單個客戶端與多個其他設備同時通信，並使用指定的端口號分隔每個會話。</p>
<h2>Email   電子郵件</h2>
<p>Email has evolved a lot over the years, but still operates on three main protocols. Simple mail transfer protocol (SMTP) is an Internet standard for sending email and most outbound email is sent using SMTP. SMTP uses port 25 to send email from network devices.</p>
<p>POP3 is the most common account type for personal email, but messages are typically deleted from the server when you check your email.</p>
<p>Internet message access protocol (IMAP) servers let you work with email messages without downloading them to your computer first. This allows for email to be synchronized (synced) across multiple devices, including your desktop, laptop, tablet, and smartphone. IMAP uses port 143 to receive and synchronize your email. The real benefit of using IMAP, especially in today’s multiple device access world, is that it can change the read and delete state of messages across the multiple devices. For example, if I read a message on my phone, when I log into my desktop, the message will also show as having been read already.</p>
<p>多年來，電子郵件已經有了很大的發展，但仍在三種主要協議上運行。簡單郵件傳輸協議（SMTP）是用於發送電子郵件的Internet標準，大多數出站電子郵件都是使用SMTP發送的。SMTP使用端口25從網絡設備發送電子郵件。</p>
<p>POP3是最常見的個人電子郵件帳戶類型，但是當您檢查電子郵件時，通常會將郵件從服務器中刪除。</p>
<p>Internet郵件訪問協議（IMAP）服務器使您可以處理電子郵件，而無需先將其下載到計算機上。這允許跨多個設備（包括台式機，筆記本電腦，平板電腦和智能手機）同步電子郵件。IMAP使用端口143接收和同步您的電子郵件。使用IMAP的真正好處（尤其是在當今的多設備訪問世界中）是，它可以更改跨多個設備的消息的讀取和刪除狀態。例如，如果我在手機上閱讀了一條消息，則當我登錄到桌面時，該消息也將顯示為已被閱讀。</p>
<h1>HW2</h1>
<h2>2-1</h2>
<p>作業二之一:</p>
<p><span>請問該如何取得與上述一乙相同格式的一乙分組數列? 請詳細說明解題步驟後列出一乙的分組數列.</span></p>
<p>答案:</p>
<p><span style="background-color: #ffffff; color: #333399;">import</span> <span style="color: #ffcc00;">urllib</span>.request<br/><span style="color: #008000;">#導入urllib.request 模塊</span><br/>target_url = "<span style="color: #800080;">https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776</span>"<br/><span style="color: #008000;">#目標網址="https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776"</span><br/>cp1a = []<br/><span style="color: #008000;">#將網址內容導入[ ]為cp1a函數</span><br/><span style="color: #333399;">for</span> line <span style="color: #333399;">in</span> <span style="color: #ffcc00;">urllib</span>.request.urlopen(target_url):<br/> cp1a.append(int(line.decode('<span style="color: #993366;">utf-8</span>').rstrip()))<br/><span style="color: #008000;">#對於urllib.request.urlopen(target_url)內的cp1a.append(int(line.decode('utf-8').rstrip()))</span><br/>from <span style="color: #ffcc00;">random</span> import shuffle<br/><span style="color: #008000;">#從random模塊中導入shuffle函數</span><br/>shuffle(cp1a)<br/><span style="color: #008000;">#隨機排列(cp1a)</span><br/>b=[cp1a[i:i +<span style="color: #008000;">6</span> ] <span style="color: #333399;">for i in</span> range(<span style="color: #008000;">0</span>, len(cp1a), <span style="color: #008000;">6</span>)]<br/><span style="color: #008000;">#函數b=[函數cpla[i:i+6]]在i內形成迴圈(0~6的字符串)</span><br/><span style="color: #333399;">print</span>(b)<br/><span style="color: #008000;">#打印輸出函數b</span></p>
<h2>2-2</h2>
<p></p>
<h2>2-3</h2>
<p></p>
<h1>HW3</h1>
<h2><span>10 List Overlap Comprehensions </span></h2>
<p><span>列表重疊理解</span></p>
<p>Exercise 10 (and<span> </span><a href="https://www.practicepython.org/solution/2014/04/16/10-list-overlap-comprehensions-solutions.html">Solution</a>)</p>
<p><span>練習10（和解答</span><span>）</span></p>
<p><span>This week’s exercise is going to be revisiting an old exercise (see <a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a><span>), except require the solution in a different way.</span></span></p>
<p><span><span>本週的練習將重溫舊的練習（請參閱</span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span><span>練習5</span></span></a><span><span>），只是需要以其他方式解決。</span></span></span></p>
<p><span><span><span>Take two lists, say for example these two:</span></span></span></p>
<p><span><span><span>拿兩個列表，舉例來說，這兩個：</span></span></span></p>
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]<br/><span>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). </span><br/><span>確保您的程序可以在兩個不同大小的列表上運行。</span><br/><span>Write this </span><s>in one line of Python</s><span><span> </span></span><em>using at least one list comprehension</em><span>. (</span><em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em><span>).</span><br/><span><em>使用至少一個列表理解</em></span><s><span><span>語句在一行Python中</span></span></s><span><span> </span></span><span><span>編寫</span><span>。</span><span>（</span><em><span>提示：記住</span></em><em><span>練習7中的</span></em><em><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span>列表理解</span></a></em><span>）。</span></span><br/><em><span>The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using <code class="highlighter-rouge">set</code>s that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the <a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><code class="highlighter-rouge">set</code> command in Python 3.3</a>, or try to implement this on your own and use at least one list comprehension in the solution.<br/>此練習的原始表述是使用一行Python編寫解決方案，但是一些讀者指出，如果不使用</span><code class="highlighter-rouge">set</code><span>我尚未在博客上討論過的s，則不可能做到這一點，因此您可以選擇使用原始指令，並閱讀</span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><code class="highlighter-rouge">set</code><span>Python 3.3中</span></a><span>的<a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set">命令</a>，或者嘗試自己實現該指令並在解決方案中至少使用一個列表理解。</span></em><br/></span></code><br/><span>Extra:</span><br/><span>額外：</span><br/><br/></pre>
<ul>
<li>Randomly generate two lists to test this</li>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<p><span>forum</span></p>
<p><span>討論區</span></p>
<pre class="tw-data-text tw-text-large XcVN5d tw-ta" data-placeholder="翻譯" dir="ltr" id="tw-target-text"><span lang="en">Concept of the week:</span></pre>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li>List comprehensions</li>
<li>Random numbers, continued</li>
</ul>
<ul>
<li><span><span>清單理解</span></span></li>
<li><span><span>隨機數，續</span></span></li>
</ul>
<p>List comprehensions</p>
<p><span><span>清單理解</span></span></p>
<p>We already discussed list comprehensions in<span> </span><a href="http://practicepython.blogspot.com/2014/03/exercise-7-list-comprehensions.html">Exercise 7</a>, but they can be made much more complicated.</p>
<p>For example:</p>
<p><span><span>我們已經在</span></span><a href="http://practicepython.blogspot.com/2014/03/exercise-7-list-comprehensions.html"><span><span>練習7中</span></span></a><span><span>討論了列表理解</span><span>，但是可以使它們複雜得多。</span></span></p>
<p><span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">allproducts</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>At the end of this piece of code, <code class="highlighter-rouge">allproducts</code><span><span> </span>will contain the list<span> </span></span><code class="highlighter-rouge">[5, 10, 15, 10, 20, 30, 15, 30, 45]</code><span>. So you can put multiple for loops inside the comprehension. But you can also add more complicated conditionals:</span></span></span></p>
<p><span><span>在這段代碼的最後，</span></span><code class="highlighter-rouge">allproducts</code><span><span>將包含list<span> </span></span></span><code class="highlighter-rouge">[5, 10, 15, 10, 20, 30, 15, 30, 45]</code><span><span>。</span><span>因此，您可以在理解中放入多個for循環。</span><span>但是您還可以添加更複雜的條件：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">customlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span> <span class="k">if</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">]</span></code></pre>
</figure>
<p>Now<span> </span><code class="highlighter-rouge">customlist</code><span> </span>contains<span> </span><code class="highlighter-rouge">[5, 15, 15, 45]</code><span> </span>because only the odd products are added to the list.</p>
<p>In general, the list comprehension takes the form:</p>
<p><span><span>現在</span></span><code class="highlighter-rouge">customlist</code><span><span>包含，</span></span><code class="highlighter-rouge">[5, 15, 15, 45]</code><span><span>因為僅將奇數產品添加到列表中。</span></span></p>
<p><span><span>通常，列表理解採用以下形式：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="p">[</span><span class="n">EXPRESSION</span> <span class="n">FOR_LOOPS</span> <span class="n">CONDITIONALS</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>as shown in the examples above.</span></span></p>
<p><span><span>如以上示例所示。</span></span></p>
<p>Random numbers, continued</p>
<p><span><span>隨機數，續</span></span></p>
<p><span><span>Try to use the <a href="https://docs.python.org/3.0/library/random.html">Python random documentation</a><span><span> </span>to figure out how to generate a random list. As a hint look below:</span></span></span></p>
<p><span><span>嘗試使用</span></span><a href="https://docs.python.org/3.0/library/random.html"><span><span>Python隨機文檔</span></span></a><span><span>來弄清楚如何生成隨機列表。</span><span>提示如下：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>This line of code will leave <code class="highlighter-rouge">a</code><span><span> </span>containing a list of 5 random numbers from 0 to 99.</span></span></span></p>
<p><span><span>這行代碼將</span></span><code class="highlighter-rouge">a</code><span><span>包含從0到99的5個隨機數的列表。</span></span></p>
<h2>15 Reverse Word Order</h2>
<p><span>倒序</span></p>
<p>Exercise 15 (and<span> </span><a href="https://www.practicepython.org/solution/2014/05/28/15-reverse-word-order-solutions.html">Solution</a>)</p>
<p><span>練習15（和</span><a href="https://www.practicepython.org/solution/2014/05/28/15-reverse-word-order-solutions.html"><span>解決方案</span></a><span>）</span></p>
<p><span>Write a program (using functions!) that asks the user for a long string containing multiple words.</span></p>
<p><span><span>編寫一個程序（使用函數！），要求用戶提供包含多個單詞的長字符串。</span></span></p>
<p><span><span>Print back to the user the same string, except with the words in backwards order. For example, say I type the string:</span></span></p>
<p><span>向用戶打印相同的字符串，但單詞順序相反。</span><span>例如，說我鍵入字符串：</span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">My</span> <span class="n">name</span> <span class="ow">is</span> <span class="n">Michele</span></code></pre>
</figure>
<p>Then I would see the string:</p>
<p><span>然後我會看到字符串：</span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">Michele</span> <span class="ow">is</span> <span class="n">name</span> <span class="n">My</span></code></pre>
</figure>
<p>shown back to me.</p>
<p><span>顯示給我。</span></p>
<p>Discussion</p>
<p><span>討論區</span></p>
<p>Concepts for this week:</p>
<p><span>本週的概念：</span></p>
<ul>
<li><span>更弦的東西</span></li>
</ul>
<ul>
<li>More string things</li>
</ul>
<p>More string things</p>
<p><span>更弦的東西</span></p>
<p>Python has a lot of interesting things you can do with strings.</p>
<p><span>Python有很多有趣的事情，您可以使用字符串來完成。</span></p>
<p>I will show a few here, but you can see many more methods that may or may not be useful at the<span> </span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=strings#string-methods">official Python documentation about the string format</a>.</p>
<p><span>我將在這裡展示一些方法，但是您可以在</span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=strings#string-methods"><span><span>關於字符串格式</span></span></a><span><span>的</span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=strings#string-methods"><span>官方Python文檔中</span></a><span>看到更多可能有用或可能沒有用的方法</span><span>。</span></span></p>
<p>Remember that<span> </span><a href="https://www.practicepython.org/exercise/2014/03/12/06-string-lists.html">strings are lists</a>.</p>
<p><span>請記住，</span><a href="https://www.practicepython.org/exercise/2014/03/12/06-string-lists.html"><span><span>字符串是列表</span></span></a><span><span>。</span></span></p>
<p>Splitting strings</p>
<p><span>分割字符串</span></p>
<p>You can “split” or tear apart strings based on a given set of characters. For example:</p>
<p><span>您可以根據給定的字符集“拆分”或拆分字符串。</span><span>例如：</span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">teststring</span> <span class="o">=</span> <span class="s">"this is a test"</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">teststring</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">"t"</span><span class="p">)</span></code></pre>
</figure>
<p>And at the end,<span> </span><code class="highlighter-rouge">result</code><span> </span>will contain the list:</p>
<p><span>最後，</span><code class="highlighter-rouge">result</code><span>將包含列表：</span></p>
<figure class="highlight"></figure>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="p">[</span><span class="s">''</span><span class="p">,</span> <span class="s">'his is a '</span><span class="p">,</span> <span class="s">'es'</span><span class="p">,</span> <span class="s">''</span><span class="p">]</span></code></pre>
</figure>
<p>Instead of<span> </span><code class="highlighter-rouge">"t"</code>, you can write any character you want. If you do not include any character, it means “split on all whitespace”:</p>
<p><span>除了</span><code class="highlighter-rouge">"t"</code><span><span>，您可以編寫任何所需的字符。</span><span>如果您不包含任何字符，則表示“在所有空格上分割”：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">teststring</span> <span class="o">=</span> <span class="s">"  this      has a lot    of   spaces and    tabs"</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">testring</span><span class="o">.</span><span class="n">split</span><span class="p">()</span></code></pre>
</figure>
<p>Then<span> </span><code class="highlighter-rouge">result</code><span> </span>contains:</p>
<p><span>然後</span><code class="highlighter-rouge">result</code><span><span>包含：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="p">[</span><span class="s">'this'</span><span class="p">,</span> <span class="s">'has'</span><span class="p">,</span> <span class="s">'a'</span><span class="p">,</span> <span class="s">'lot'</span><span class="p">,</span> <span class="s">'of'</span><span class="p">,</span> <span class="s">'spaces'</span><span class="p">,</span> <span class="s">'and'</span><span class="p">,</span> <span class="s">'tabs'</span><span class="p">]</span></code></pre>
</figure>
<p>Joining strings</p>
<p><span>連接字符串</span></p>
<p>You can also relatively easily “join” or “smush” strings together:</p>
<p><span>您還可以相對容易地將字符串“連接”或“混入”：</span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">listofstrings</span> <span class="o">=</span> <span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">]</span>
  <span class="n">result</span> <span class="o">=</span> <span class="s">"**"</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">listofstrings</span><span class="p">)</span></code></pre>
</figure>
<p>Then<span> </span><code class="highlighter-rouge">result</code><span> </span>will contain the string:</p>
<p><span>然後</span><code class="highlighter-rouge">result</code><span><span>將包含字符串：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  a**b**c</code></pre>
</figure>
<p>Take a look at the official Python documentation for more information.</p>
<p><span><span>查看官方Python文檔以獲取更多信息。</span></span></p>
<h2>21 Write To A File</h2>
<p><span>寫入文件</span></p>
<p>Exercise 21 (and<span> </span><a href="https://www.practicepython.org/solution/2014/12/08/21-write-to-a-file-solutions.html">Solution</a>)</p>
<p><span>練習21（和</span><a href="https://www.practicepython.org/solution/2014/12/08/21-write-to-a-file-solutions.html"><span>解決方案</span></a><span>）</span></p>
<p>Take the code from the<span> </span><a href="https://www.practicepython.org/exercise/2014/06/06/17-decode-a-web-page.html">How To Decode A Website</a><span> </span>exercise (if you didn’t do it or just want to play with some different code, use the code from the<span> </span><a href="https://www.practicepython.org/solution/2014/07/10/17-decode-a-web-page-solutions.html">solution</a>), and instead of printing the results to a screen, write the results to a txt file.</p>
<p><span>從“</span><a href="https://www.practicepython.org/exercise/2014/06/06/17-decode-a-web-page.html"><span><span>如何對網站</span></span></a><span><span>進行</span><a href="https://www.practicepython.org/exercise/2014/06/06/17-decode-a-web-page.html"><span>解碼”</span></a><span>練習中</span><span>獲取代碼</span><span>（如果您沒有這樣做，或者只是想使用一些不同的代碼，請使用</span></span><a href="https://www.practicepython.org/solution/2014/07/10/17-decode-a-web-page-solutions.html"><span><span>解決方案中</span></span></a><span><span>的代碼</span><span>），而不是將結果打印到屏幕上，而是將結果寫到屏幕上到txt文件。</span></span></p>
<p>In your code, just make up a name for the file you are saving to.</p>
<p><span>在您的代碼中，只需為要保存到的文件命名。</span></p>
<p>Extras:</p>
<p><span>附加功能：</span></p>
<ul>
<li><span>要求用戶指定將要保存的輸出文件的名稱。</span></li>
</ul>
<ul>
<li>Ask the user to specify the name of the output file that will be saved.</li>
</ul>
<p>Discussion</p>
<p><span>討論區</span></p>
<p>Topics:</p>
<p><span>主題：</span></p>
<ol>
<li><span>寫入文件</span></li>
<li><span>陷阱和警告</span></li>
</ol>
<ol>
<li>Writing to a file</li>
<li>Gotchas and warnings</li>
</ol>
<p>Saving to a file</p>
<p><span>保存到文件</span></p>
<p>Python makes it very easy to write to a file.</p>
<p><span>Python使寫入文件變得非常容易。</span></p>
<p>Depending on what kind of file you want to write to and what kind of data you are writing, your options are plenty. I will show you the simplest form of writing to a file - writing plain text to a plain old text file.</p>
<p><span>根據要寫入的文件類型和要寫入的數據類型，您有很多選擇。</span><span>我將向您展示最簡單的寫入文件的形式-將純文本寫入純文本文件。</span></p>
<p>In other words, writing a string to a<span> </span><code class="highlighter-rouge">.txt</code><span> </span>file.</p>
<p><span>換句話說，將字符串寫入</span><code class="highlighter-rouge">.txt</code><span><span>文件。</span></span></p>
<p>The code looks like this:</p>
<p><span>代碼如下：</span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'file_to_save.txt'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">open_file</span><span class="p">:</span>
    <span class="n">open_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'A string to write'</span><span class="p">)</span></code></pre>
</figure>
<p>An alternate way of writing the same code is like so:</p>
<p><span>編寫相同代碼的另一種方法是這樣的：</span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">open_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">'file_to_save.txt'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
  <span class="n">open_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">'A string to write'</span><span class="p">)</span>
  <span class="n">open_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></code></pre>
</figure>
<p>The first is considered better programming practice, but the second might explain a little bit better what is going on in the first code sample.</p>
<p><span>第一種被認為是更好的編程實踐，但是第二種可能會更好地解釋第一個代碼示例中發生的事情。</span></p>
<p>Let’s go through line by line.</p>
<p><span>讓我們逐行進行。</span></p>
<p>The<span> </span><code class="highlighter-rouge">with open('file_to_save.txt', 'w') as open_file</code><span> </span>syntax is new for us - all it means is that inside the code block indented underneath, there will be a variable called<span> </span><code class="highlighter-rouge">open_file</code><span> </span>that will represent the file object.</p>
<p><span>該</span><code class="highlighter-rouge">with open('file_to_save.txt', 'w') as open_file</code><span><span>語法是新的我們-所有這意味著內的代碼塊縮進下，會有一個叫做變量</span></span><code class="highlighter-rouge">open_file</code><span><span>將代表文件對象。</span></span></p>
<p>You can pick any name for this file - it is just a variable name. The<span> </span><code class="highlighter-rouge">open()</code><span> </span>function takes two arguments - the first is the name of a file as a string (if the file does not exist, Python will create it), and a second argument that represents<span> </span><em>how</em><span> </span>the file should be opened.</p>
<p><span>您可以為此文件選擇任何名稱-它只是一個變量名。該</span><code class="highlighter-rouge">open()</code><span><span>函數有兩個參數-第一個是文件作為一個字符串（如果文件不存在，Python將創建它），並表示第二個參數的名稱</span></span><em><span><span>如何</span></span></em><span><span>文件應該被打開。</span></span></p>
<p>There are a few ways you can open files (read all about it<span> </span><a href="https://docs.python.org/3.3/tutorial/inputoutput.html#reading-and-writing-files">at the official Python documentation</a>), but in short, there are two most common ones:<span> </span><code class="highlighter-rouge">'r'</code><span> </span>and<span> </span><code class="highlighter-rouge">'w'</code>.<span> </span><code class="highlighter-rouge">'r'</code><span> </span>stands for “read only” and<span> </span><code class="highlighter-rouge">'w'</code><span> </span>stands for “write only” (you can open for both read and write using<span> </span><code class="highlighter-rouge">'r+'</code>).</p>
<p><span>您可以通過幾種方式打開文件（有關詳細信息，請參見</span><a href="https://docs.python.org/3.3/tutorial/inputoutput.html#reading-and-writing-files"><span><span>Python的官方文檔</span></span></a><span><span>），總之，有兩種最常見的方式：</span></span><code class="highlighter-rouge">'r'</code><span><span>和</span></span><code class="highlighter-rouge">'w'</code><span><span>。</span></span><code class="highlighter-rouge">'r'</code><span><span>代表“只讀”和</span></span><code class="highlighter-rouge">'w'</code><span><span>“只寫”（您可以使用</span></span><code class="highlighter-rouge">'r+'</code><span><span>）。</span></span></p>
<p>You should tell Python which way you want to open the file - you don’t want to modify a file you are only looking at, and opening a file with<span> </span><code class="highlighter-rouge">'w'</code><span> </span>when you want to only read it will overwrite the old file.</p>
<p><span>您應該告訴Python您想以哪種方式打開文件-您不想修改僅查看的文件，</span><code class="highlighter-rouge">'w'</code><span><span>而只想讀取</span><span>文件</span><span>時</span><span>打開文件</span><span>將覆蓋舊文件。</span></span></p>
<p>When you open a file, it will look for it in the same directory as the Python program. If there is no file with that name, Python will create a file in that directory with the given name. To look for files in other directories, use the<span> </span><code class="highlighter-rouge">../</code><span> </span>notation to move up and down directories as necessary.</p>
<p><span>當您打開文件時，它將在與Python程序相同的目錄中查找。如果沒有使用該名稱的文件，Python將在該目錄中使用給定名稱創建一個文件。要在其他目錄中查找文件，請</span><code class="highlighter-rouge">../</code><span><span>根據需要</span><span>使用</span><span>表示法在目錄中上下移動。</span></span></p>
<p>As soon as the program exists the<span> </span><code class="highlighter-rouge">with</code><span> </span>code block for any reason, it will close the file.</p>
<p><span>一旦程序</span><code class="highlighter-rouge">with</code><span><span>由於某種原因</span><span>存在</span><span>代碼塊，它將關閉文件。</span></span></p>
<p>In the second code example case, I created the file object by opening the file and saving the object to my variable<span> </span><code class="highlighter-rouge">open_file</code>.</p>
<p><span>在第二個代碼示例案例中，我通過打開文件並將對象保存到我的變量中來創建文件對象</span><code class="highlighter-rouge">open_file</code><span><span>。</span></span></p>
<p>I then had to remember to close the file manually at the end of my program.</p>
<p><span>然後，我必須記住在程序結束時手動關閉文件。</span></p>
<p>This is considered worse programming practice, because in case there is an error in the program and it terminates before hitting the<span> </span><code class="highlighter-rouge">.close()<span> </span><span>statement, there will be a floating open file object somewhere in memory.</span></code></p>
<p><code class="highlighter-rouge"><span>這被認為是較差的編程習慣，因為如果程序中有錯誤並且在命中該</span><code class="highlighter-rouge">.</code>close()<span><span>語句</span><span>之前終止</span><span>，則在內存中的某個位置會有一個浮動的打開文件對象。</span></span></code></p>
<p>You do this enough times and it becomes a problem, especially for production environments. For playing around with Python, this is not usually a problem, but why not learn how to program correctly the first time?</p>
<p><span>您執行此操作的次數足夠多，這成為一個問題，尤其是對於生產環境。</span><span>對於使用Python來說，這通常不是問題，但是為什麼不第一次學習如何正確編程呢？</span></p>
<p>The<span> </span><code class="highlighter-rouge">write()</code><span> </span>portion is simple - call<span> </span><code class="highlighter-rouge">.write()</code><span> </span>with a string (if something is not a string, turn it into a string first), and it will write to the end of the file.</p>
<p><span>該</span><code class="highlighter-rouge">write()</code><span><span>部分很簡單-</span></span><code class="highlighter-rouge">.write()</code><span><span>用字符串</span><span>調用</span><span>（如果不是字符串，請先將其轉換為字符串），然後它將寫入文件的末尾。</span></span></p>
<p>When the program exists the<span> </span><code class="highlighter-rouge">with</code><span> </span>statement, the file will automatically be saved. In fact, every time after a<span> </span><code class="highlighter-rouge">.write()</code><span> </span>statement, the file will be automatically saved.</p>
<p><span>當程序存在該</span><code class="highlighter-rouge">with</code><span><span>語句時，文件將自動保存。</span><span>實際上，每次</span></span><code class="highlighter-rouge">.write()</code><span><span>聲明後，文件都會自動保存。</span></span></p>
<p>Gotchas and Warnings</p>
<p><span>陷阱和警告</span></p>
<p>This all seems simple enough, but there are a few caveats to the file-writing endeavor.</p>
<p><span>這一切似乎很簡單，但是文件編寫工作有一些警告。</span></p>
<p><span></span></p>
<ol>
<li><span>您始終要確保關閉文件。上面已說明了最簡單的策略-使用該</span><code class="highlighter-rouge">with</code><span>語句，而不是嘗試手動記住</span><code class="highlighter-rouge">.close()</code><span>該文件。</span></li>
<li><span>打開要寫入的文件</span><code class="highlighter-rouge">'w'</code><span>將覆蓋該名稱當前存在的任何文件。如果您以前已將數據寫入該文件，則Python打開該文件後，該數據將立即消失。</span></li>
<li><span>只要指定正確的格式，就可以在Python中將</span><em><span>任何</span></em><span>類型的對象寫入<em>任何</em>類型的文件。最簡單的方法是將字符串寫入</span><code class="highlighter-rouge">.txt</code><span>文件。但是請記住-在將數字或對象寫入文件之前，必須將其轉換為字符串。在以後的練習中，我們將討論編寫其他格式的內容。</span><span></span></li>
</ol>
<ol>
<li>You always want to make sure you close a file. The easiest strategy for this is explained above - use the<span> </span><code class="highlighter-rouge">with</code><span> </span>statement rather than trying to manually remember to<span> </span><code class="highlighter-rouge">.close()</code><span> </span>the file.</li>
<li>Opening a file for writing with<span> </span><code class="highlighter-rouge">'w'</code><span> </span>will overwrite any file that currently exists with that name. If you have previously written data to that file, it is now gone as soon as Python opens it.</li>
<li>You can write<span> </span><em>any</em><span> </span>kind of object to any kind of file in Python, as long as you specify the correct format. The simplest thing to do is to write strings to a<span> </span><code class="highlighter-rouge">.txt</code><span> </span>file. But remember - you have to convert numbers or objects into strings before you write them to a file. In a later exercise, we’ll talk about writing to other formats.</li>
</ol>
<p></p>
<h1>其他</h1>
<h2>Develop</h2>
<p></p>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h2>TEST</h2>